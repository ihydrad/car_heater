
AVRASM ver. 2.1.30  D:\MCU\CVAVR\Мои проекты\car_heater\Release\List\car_heater.asm Wed Sep 25 20:47:09 2019

D:\MCU\CVAVR\Мои проекты\car_heater\Release\List\car_heater.asm(1011): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATtiny13A
                 ;Program type           : Application
                 ;Clock frequency        : 9,600000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 16 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: Off
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny13A
                 	#pragma AVRPART MEMORY PROG_FLASH 1024
                 	#pragma AVRPART MEMORY EEPROM 64
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 64
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x009F
                 	.EQU __DSTACK_SIZE=0x0010
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOV  R30,R0
                 	MOV  R31,R1
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOV  R30,R0
                 	MOV  R31,R1
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOV  R26,R0
                 	MOV  R27,R1
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOV  R30,R28
                 	MOV  R31,R29
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOV  R26,R28
                 	MOV  R27,R29
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _flag=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c009      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
                 
                 __RESET:
00000a 94f8      	CLI
00000b 27ee      	CLR  R30
00000c bbec      	OUT  EECR,R30
00000d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00000e e08d      	LDI  R24,(14-2)+1
00000f e0a2      	LDI  R26,2
                 __CLEAR_REG:
000010 93ed      	ST   X+,R30
000011 958a      	DEC  R24
000012 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000013 e480      	LDI  R24,__CLEAR_SRAM_SIZE
000014 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000015 93ed      	ST   X+,R30
000016 958a      	DEC  R24
000017 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000018 e9ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000019 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00001a e7c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
00001b c0ea      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x70
                 
                 	.CSEG
                 ;#include <tiny13a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <1wire.h>
                 ;
                 ;#define SBR(port, bit)        port |= (1<<bit)
                 ;#define CBR(port, bit)        port &= (~(1<<bit))
                 ;#define INV(port, bit)        port ^= (1<<bit)
                 ;#define SBRC(port, bit)      ((port & (1<<bit)) == 0)
                 ;#define SBRS(port, bit)      ((port & (1<<bit)) != 0)
                 ;
                 ;#define BTN             2
                 ;#define BUZZER          0
                 ;#define POWER           OCR0B
                 ;#define BTN_PRESSED     !PINB.2
                 ;
                 ;//Settings
                 ;#define TEMP_SW         4
                 ;#define STEP_TIME       3
                 ;#define STEP_POWER      20
                 ;#define MAX_TIME        15
                 ;#define MAX_POWER       100
                 ;#define DEFAULT_POWER   40
                 ;#define DEFAULT_TIME    12
                 ;
                 ;eeprom unsigned char power_set;
                 ;eeprom unsigned char time_set;
                 ;
                 ;//**********************
                 ;unsigned char flag;
                 ;#define SETTINGS        0
                 ;
                 ;char btn_func(void);
                 ;
                 ;void initdev(){
                 ; 0000 0022 void initdev(){
                 
                 	.CSEG
                 _initdev:
                 ; .FSTART _initdev
                 ; 0000 0023 //Config port
                 ; 0000 0024     SBR(PORTB, BTN);
00001c 9ac2      	SBI  0x18,2
                 ; 0000 0025     CBR(DDRB, BTN);
00001d 98ba      	CBI  0x17,2
                 ; 0000 0026     SBR(DDRB, BUZZER);
00001e 9ab8      	SBI  0x17,0
                 ; 0000 0027     SBR(DDRB, 1);
00001f 9ab9      	SBI  0x17,1
                 ; 0000 0028 // Timer/Counter 0 initialization
                 ; 0000 0029 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (1<<WGM00);  //TOP on OCR0A Freq PWM = 90kHz
000020 e2e3      	LDI  R30,LOW(35)
000021 bdef      	OUT  0x2F,R30
                 ; 0000 002A TCCR0B=(1<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00); //freq DIV 1
000022 e0e9      	LDI  R30,LOW(9)
000023 bfe3      	OUT  0x33,R30
                 ; 0000 002B TCNT0=0x00;
000024 e0e0      	LDI  R30,LOW(0)
000025 bfe2      	OUT  0x32,R30
                 ; 0000 002C OCR0A=100;  //TOP
000026 e6e4      	LDI  R30,LOW(100)
000027 bfe6      	OUT  0x36,R30
                 ; 0000 002D OCR0B=MAX_POWER;   //PWM, OCR0B pin only! (whith TOP on OCR0A)
000028 bde9      	OUT  0x29,R30
                 ; 0000 002E 
                 ; 0000 002F //Turnoff analogcomp
                 ; 0000 0030     ACSR=(1<<ACD);
000029 e8e0      	LDI  R30,LOW(128)
00002a b9e8      	OUT  0x8,R30
                 ; 0000 0031 }
00002b 9508      	RET
                 ; .FEND
                 ;
                 ;void buzz(unsigned char cnt, unsigned int del ){
                 ; 0000 0033 void buzz(unsigned char cnt, unsigned int del ){
                 _buzz:
                 ; .FSTART _buzz
                 ; 0000 0034    unsigned char i;
                 ; 0000 0035 
                 ; 0000 0036     for(i=0; i<cnt; i++){
00002c 93ba      	ST   -Y,R27
00002d 93aa      	ST   -Y,R26
00002e 930a      	ST   -Y,R16
                 ;	cnt -> Y+3
                 ;	del -> Y+1
                 ;	i -> R16
00002f e000      	LDI  R16,LOW(0)
                 _0x4:
000030 81eb      	LDD  R30,Y+3
000031 170e      	CP   R16,R30
000032 f450      	BRSH _0x5
                 ; 0000 0037         SBR(PORTB, BUZZER);
000033 9ac0      	SBI  0x18,0
                 ; 0000 0038         delay_ms(del);
000034 81a9      	LDD  R26,Y+1
000035 81ba      	LDD  R27,Y+1+1
000036 d111      	RCALL _delay_ms
                 ; 0000 0039         CBR(PORTB, BUZZER);
000037 98c0      	CBI  0x18,0
                 ; 0000 003A         delay_ms(del);
000038 81a9      	LDD  R26,Y+1
000039 81ba      	LDD  R27,Y+1+1
00003a d10d      	RCALL _delay_ms
                 ; 0000 003B     }
00003b 5f0f      	SUBI R16,-1
00003c cff3      	RJMP _0x4
                 _0x5:
                 ; 0000 003C }
00003d 8108      	LDD  R16,Y+0
00003e 9624      	ADIW R28,4
00003f 9508      	RET
                 ; .FEND
                 ;
                 ;void delay_min(unsigned char var){
                 ; 0000 003E void delay_min(unsigned char var){
                 _delay_min:
                 ; .FSTART _delay_min
                 ; 0000 003F     unsigned char min, i;
                 ; 0000 0040 
                 ; 0000 0041     for(min=0; min<var; min++){
000040 93aa      	ST   -Y,R26
000041 d1b2      	RCALL __SAVELOCR2
                 ;	var -> Y+2
                 ;	min -> R16
                 ;	i -> R17
000042 e000      	LDI  R16,LOW(0)
                 _0x7:
000043 81ea      	LDD  R30,Y+2
000044 170e      	CP   R16,R30
000045 f448      	BRSH _0x8
                 ; 0000 0042         for(i=0; i<60; i++){
000046 e010      	LDI  R17,LOW(0)
                 _0xA:
000047 331c      	CPI  R17,60
000048 f420      	BRSH _0xB
                 ; 0000 0043             delay_ms(1000);
000049 d0df      	RCALL SUBOPT_0x0
                 ; 0000 0044             btn_func();
00004a d04a      	RCALL _btn_func
                 ; 0000 0045         }
00004b 5f1f      	SUBI R17,-1
00004c cffa      	RJMP _0xA
                 _0xB:
                 ; 0000 0046     }
00004d 5f0f      	SUBI R16,-1
00004e cff4      	RJMP _0x7
                 _0x8:
                 ; 0000 0047 }
00004f d1a8      	RCALL __LOADLOCR2
000050 9623      	ADIW R28,3
000051 9508      	RET
                 ; .FEND
                 ;
                 ;void rd_sets(unsigned char var){
                 ; 0000 0049 void rd_sets(unsigned char var){
                 _rd_sets:
                 ; .FSTART _rd_sets
                 ; 0000 004A 
                 ; 0000 004B     //CLEAR EEPROM BYTE = 255, CHECK EEPROM AND SET DEFAULT, IF CLEAR.
                 ; 0000 004C     if(power_set > MAX_POWER) power_set = DEFAULT_POWER;
000052 93aa      	ST   -Y,R26
                 ;	var -> Y+0
000053 d0d8      	RCALL SUBOPT_0x1
000054 d183      	RCALL __EEPROMRDB
000055 36e5      	CPI  R30,LOW(0x65)
000056 f018      	BRLO _0xC
000057 d0d4      	RCALL SUBOPT_0x1
000058 e2e8      	LDI  R30,LOW(40)
000059 d189      	RCALL __EEPROMWRB
                 ; 0000 004D     if(time_set > MAX_TIME) time_set = DEFAULT_TIME;
                 _0xC:
00005a d0d4      	RCALL SUBOPT_0x2
00005b d17c      	RCALL __EEPROMRDB
00005c 31e0      	CPI  R30,LOW(0x10)
00005d f018      	BRLO _0xD
00005e d0d0      	RCALL SUBOPT_0x2
00005f e0ec      	LDI  R30,LOW(12)
000060 d182      	RCALL __EEPROMWRB
                 ; 0000 004E 
                 ; 0000 004F      switch(var){
                 _0xD:
000061 81e8      	LD   R30,Y
000062 d0cf      	RCALL SUBOPT_0x3
                 ; 0000 0050         case 1:
000063 f441      	BRNE _0x11
                 ; 0000 0051             buzz(power_set/STEP_POWER, 200);
000064 d0d2      	RCALL SUBOPT_0x4
000065 e0f0      	LDI  R31,0
000066 2fae      	MOV  R26,R30
000067 2fbf      	MOV  R27,R31
000068 e1e4      	LDI  R30,LOW(20)
000069 e0f0      	LDI  R31,HIGH(20)
00006a d0cf      	RCALL SUBOPT_0x5
                 ; 0000 0052         break;
00006b c00b      	RJMP _0x10
                 ; 0000 0053 
                 ; 0000 0054         case 2:
                 _0x11:
00006c 30e2      	CPI  R30,LOW(0x2)
00006d e0a0      	LDI  R26,HIGH(0x2)
00006e 07fa      	CPC  R31,R26
00006f f439      	BRNE _0x13
                 ; 0000 0055             buzz(time_set/STEP_TIME, 200);
000070 d0ce      	RCALL SUBOPT_0x6
000071 e0f0      	LDI  R31,0
000072 2fae      	MOV  R26,R30
000073 2fbf      	MOV  R27,R31
000074 e0e3      	LDI  R30,LOW(3)
000075 e0f0      	LDI  R31,HIGH(3)
000076 d0c3      	RCALL SUBOPT_0x5
                 ; 0000 0056         break;
                 ; 0000 0057 
                 ; 0000 0058         default:break;
                 _0x13:
                 ; 0000 0059      }
                 _0x10:
                 ; 0000 005A }
000077 9621      	ADIW R28,1
000078 9508      	RET
                 ; .FEND
                 ;
                 ;char btn_press(){
                 ; 0000 005C char btn_press(){
                 _btn_press:
                 ; .FSTART _btn_press
                 ; 0000 005D unsigned int btn_cnt=0;
                 ; 0000 005E 
                 ; 0000 005F     while(BTN_PRESSED){
000079 d17a      	RCALL __SAVELOCR2
                 ;	btn_cnt -> R16,R17
                +
00007a e000     +LDI R16 , LOW ( 0 )
00007b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x14:
00007c 99b2      	SBIC 0x16,2
00007d c010      	RJMP _0x16
                 ; 0000 0060         btn_cnt++;
                +
00007e 5f0f     +SUBI R16 , LOW ( - 1 )
00007f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0061         if(btn_cnt == 100){
000080 e6e4      	LDI  R30,LOW(100)
000081 e0f0      	LDI  R31,HIGH(100)
000082 17e0      	CP   R30,R16
000083 07f1      	CPC  R31,R17
000084 f431      	BRNE _0x17
                 ; 0000 0062             buzz(1, 2000);
000085 d0bc      	RCALL SUBOPT_0x7
000086 eda0      	LDI  R26,LOW(2000)
000087 e0b7      	LDI  R27,HIGH(2000)
000088 dfa3      	RCALL _buzz
                 ; 0000 0063             return 2;
000089 e0e2      	LDI  R30,LOW(2)
00008a c04f      	RJMP _0x2000002
                 ; 0000 0064         }
                 ; 0000 0065         delay_ms(50);
                 _0x17:
00008b d0b9      	RCALL SUBOPT_0x8
00008c d0bb      	RCALL _delay_ms
                 ; 0000 0066     }
00008d cfee      	RJMP _0x14
                 _0x16:
                 ; 0000 0067 
                 ; 0000 0068     if(btn_cnt)
00008e 2e00      	MOV  R0,R16
00008f 2a01      	OR   R0,R17
000090 f011      	BREQ _0x18
                 ; 0000 0069         return 1;
000091 e0e1      	LDI  R30,LOW(1)
000092 c047      	RJMP _0x2000002
                 ; 0000 006A     else
                 _0x18:
                 ; 0000 006B         return 0;
000093 e0e0      	LDI  R30,LOW(0)
000094 c045      	RJMP _0x2000002
                 ; 0000 006C }
                 ; .FEND
                 ;
                 ;char btn_func(){
                 ; 0000 006E char btn_func(){
                 _btn_func:
                 ; .FSTART _btn_func
                 ; 0000 006F unsigned char menu_state, btn_state;
                 ; 0000 0070 
                 ; 0000 0071     if(btn_press()==2){
000095 d15e      	RCALL __SAVELOCR2
                 ;	menu_state -> R16
                 ;	btn_state -> R17
000096 dfe2      	RCALL _btn_press
000097 30e2      	CPI  R30,LOW(0x2)
000098 f439      	BRNE _0x1A
                 ; 0000 0072         if(SBRC(flag, SETTINGS))
000099 fc40      	SBRC R4,0
00009a c003      	RJMP _0x1B
                 ; 0000 0073             SBR(flag, SETTINGS);
00009b e0e1      	LDI  R30,LOW(1)
00009c 2a4e      	OR   R4,R30
                 ; 0000 0074         else
00009d c002      	RJMP _0x1C
                 _0x1B:
                 ; 0000 0075             CBR(flag, SETTINGS);
00009e efee      	LDI  R30,LOW(254)
00009f 224e      	AND  R4,R30
                 ; 0000 0076     }
                 _0x1C:
                 ; 0000 0077 
                 ; 0000 0078     if(SBRC(flag, SETTINGS))
                 _0x1A:
0000a0 fc40      	SBRC R4,0
0000a1 c002      	RJMP _0x1D
                 ; 0000 0079         return 0;
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 c036      	RJMP _0x2000002
                 ; 0000 007A 
                 ; 0000 007B     menu_state=1;
                 _0x1D:
0000a4 e001      	LDI  R16,LOW(1)
                 ; 0000 007C     rd_sets(menu_state);
0000a5 2fa0      	MOV  R26,R16
0000a6 dfab      	RCALL _rd_sets
                 ; 0000 007D 
                 ; 0000 007E     while(SBRS(flag, SETTINGS)){
                 _0x1E:
0000a7 fe40      	SBRS R4,0
0000a8 c02e      	RJMP _0x20
                 ; 0000 007F         btn_state = btn_press();
0000a9 dfcf      	RCALL _btn_press
0000aa 2f1e      	MOV  R17,R30
                 ; 0000 0080         if(btn_state==1){
0000ab 3011      	CPI  R17,1
0000ac f4e9      	BRNE _0x21
                 ; 0000 0081             switch(menu_state){
0000ad 2fe0      	MOV  R30,R16
0000ae d083      	RCALL SUBOPT_0x3
                 ; 0000 0082                 case 1:
0000af f459      	BRNE _0x25
                 ; 0000 0083                     if(power_set > MAX_POWER)
0000b0 d086      	RCALL SUBOPT_0x4
0000b1 36e5      	CPI  R30,LOW(0x65)
0000b2 f018      	BRLO _0x26
                 ; 0000 0084                         power_set=STEP_POWER;
0000b3 d078      	RCALL SUBOPT_0x1
0000b4 e1e4      	LDI  R30,LOW(20)
0000b5 c003      	RJMP _0x3C
                 ; 0000 0085                     else
                 _0x26:
                 ; 0000 0086                         power_set+=STEP_POWER;
0000b6 d080      	RCALL SUBOPT_0x4
0000b7 5eec      	SUBI R30,-LOW(20)
0000b8 d073      	RCALL SUBOPT_0x1
                 _0x3C:
0000b9 d129      	RCALL __EEPROMWRB
                 ; 0000 0087                 break;
0000ba c00e      	RJMP _0x24
                 ; 0000 0088 
                 ; 0000 0089                 case 2:
                 _0x25:
0000bb 30e2      	CPI  R30,LOW(0x2)
0000bc e0a0      	LDI  R26,HIGH(0x2)
0000bd 07fa      	CPC  R31,R26
0000be f451      	BRNE _0x2B
                 ; 0000 008A                     if(time_set > MAX_TIME)
0000bf d07f      	RCALL SUBOPT_0x6
0000c0 31e0      	CPI  R30,LOW(0x10)
0000c1 f018      	BRLO _0x29
                 ; 0000 008B                         time_set=STEP_TIME;
0000c2 d06c      	RCALL SUBOPT_0x2
0000c3 e0e3      	LDI  R30,LOW(3)
0000c4 c003      	RJMP _0x3D
                 ; 0000 008C                     else
                 _0x29:
                 ; 0000 008D                         time_set+=STEP_TIME;
0000c5 d079      	RCALL SUBOPT_0x6
0000c6 5fed      	SUBI R30,-LOW(3)
0000c7 d067      	RCALL SUBOPT_0x2
                 _0x3D:
0000c8 d11a      	RCALL __EEPROMWRB
                 ; 0000 008E                 break;
                 ; 0000 008F 
                 ; 0000 0090                 default:break;
                 _0x2B:
                 ; 0000 0091             }
                 _0x24:
                 ; 0000 0092             rd_sets(menu_state);
0000c9 c006      	RJMP _0x3E
                 ; 0000 0093         }
                 ; 0000 0094         else if(btn_state==2){
                 _0x21:
0000ca 3012      	CPI  R17,2
0000cb f431      	BRNE _0x2D
                 ; 0000 0095             menu_state++;
0000cc 5f0f      	SUBI R16,-1
                 ; 0000 0096             if(menu_state > 2)
0000cd 3003      	CPI  R16,3
0000ce f008      	BRLO _0x2E
                 ; 0000 0097                 menu_state=0;
0000cf e000      	LDI  R16,LOW(0)
                 ; 0000 0098             rd_sets(menu_state);
                 _0x2E:
                 _0x3E:
0000d0 2fa0      	MOV  R26,R16
0000d1 df80      	RCALL _rd_sets
                 ; 0000 0099         }
                 ; 0000 009A 
                 ; 0000 009B         if(!menu_state)
                 _0x2D:
0000d2 3000      	CPI  R16,0
0000d3 f411      	BRNE _0x2F
                 ; 0000 009C             CBR(flag, SETTINGS);
0000d4 efee      	LDI  R30,LOW(254)
0000d5 224e      	AND  R4,R30
                 ; 0000 009D     }
                 _0x2F:
0000d6 cfd0      	RJMP _0x1E
                 _0x20:
                 ; 0000 009E     buzz(1, 50);
0000d7 d06a      	RCALL SUBOPT_0x7
0000d8 d06c      	RCALL SUBOPT_0x8
0000d9 df52      	RCALL _buzz
                 ; 0000 009F }
                 _0x2000002:
0000da 9109      	LD   R16,Y+
0000db 9119      	LD   R17,Y+
0000dc 9508      	RET
                 ; .FEND
                 ;
                 ;signed char read_ds18b20(){
                 ; 0000 00A1 signed char read_ds18b20(){
                 _read_ds18b20:
                 ; .FSTART _read_ds18b20
                 ; 0000 00A2   unsigned char data[2];
                 ; 0000 00A3   signed char temp;
                 ; 0000 00A4   signed int raw;
                 ; 0000 00A5 
                 ; 0000 00A6   w1_init();
0000dd 9722      	SBIW R28,2
0000de d114      	RCALL __SAVELOCR3
                 ;	data -> Y+3
                 ;	temp -> R16
                 ;	raw -> R17,R18
0000df d072      	RCALL _w1_init
                 ; 0000 00A7   delay_ms(10);
0000e0 e0aa      	LDI  R26,LOW(10)
0000e1 e0b0      	LDI  R27,0
0000e2 d065      	RCALL _delay_ms
                 ; 0000 00A8   if(w1_init()){
0000e3 d06e      	RCALL _w1_init
0000e4 30e0      	CPI  R30,0
0000e5 f0e1      	BREQ _0x30
                 ; 0000 00A9     w1_write(0xCC);
0000e6 ecac      	LDI  R26,LOW(204)
0000e7 d0b1      	RCALL _w1_write
                 ; 0000 00AA     w1_write(0x44);
0000e8 e4a4      	LDI  R26,LOW(68)
0000e9 d0af      	RCALL _w1_write
                 ; 0000 00AB     delay_ms(1000);
0000ea d03e      	RCALL SUBOPT_0x0
                 ; 0000 00AC     //Читаем данные с датчика
                 ; 0000 00AD     w1_init();
0000eb d066      	RCALL _w1_init
                 ; 0000 00AE     w1_write(0xCC);
0000ec ecac      	LDI  R26,LOW(204)
0000ed d0ab      	RCALL _w1_write
                 ; 0000 00AF     w1_write(0xBE);
0000ee ebae      	LDI  R26,LOW(190)
0000ef d0a9      	RCALL _w1_write
                 ; 0000 00B0       data[0] = w1_read();
0000f0 d0a3      	RCALL _w1_read
0000f1 83eb      	STD  Y+3,R30
                 ; 0000 00B1       data[1] = w1_read();
0000f2 d0a1      	RCALL _w1_read
0000f3 83ec      	STD  Y+4,R30
                 ; 0000 00B2 
                 ; 0000 00B3     raw = (data[1] << 8) | (data[0] & ~0x03);
0000f4 e0e0      	LDI  R30,0
0000f5 81fc      	LDD  R31,Y+4
0000f6 2fae      	MOV  R26,R30
0000f7 2fbf      	MOV  R27,R31
0000f8 81eb      	LDD  R30,Y+3
0000f9 e0f0      	LDI  R31,0
0000fa 7fec      	ANDI R30,LOW(0xFFFC)
0000fb 2bea      	OR   R30,R26
0000fc 2bfb      	OR   R31,R27
                +
0000fd 2f1e     +MOV R17 , R30
0000fe 2f2f     +MOV R18 , R31
                 	__PUTW1R 17,18
                 ; 0000 00B4     temp = raw>>4;
0000ff d0a7      	RCALL __ASRW4
000100 2f0e      	MOV  R16,R30
                 ; 0000 00B5 
                 ; 0000 00B6     return temp;
000101 c001      	RJMP _0x2000001
                 ; 0000 00B7   } else return -127;
                 _0x30:
000102 e8e1      	LDI  R30,LOW(129)
                 ; 0000 00B8 }
                 _0x2000001:
000103 d0f3      	RCALL __LOADLOCR3
000104 9625      	ADIW R28,5
000105 9508      	RET
                 ; .FEND
                 ;
                 ;void main(){
                 ; 0000 00BA void main(){
                 _main:
                 ; .FSTART _main
                 ; 0000 00BB     signed char t;
                 ; 0000 00BC     initdev();
                 ;	t -> R16
000106 df15      	RCALL _initdev
                 ; 0000 00BD     t= read_ds18b20();
000107 dfd5      	RCALL _read_ds18b20
000108 2f0e      	MOV  R16,R30
                 ; 0000 00BE     if(t<-30 || t>60){
000109 3e02      	CPI  R16,226
00010a f014      	BRLT _0x33
00010b 330d      	CPI  R16,61
00010c f044      	BRLT _0x32
                 _0x33:
                 ; 0000 00BF         buzz(1, 5000);
00010d d034      	RCALL SUBOPT_0x7
00010e e8a8      	LDI  R26,LOW(5000)
00010f e1b3      	LDI  R27,HIGH(5000)
000110 df1b      	RCALL _buzz
                 ; 0000 00C0         delay_ms(3000);
000111 eba8      	LDI  R26,LOW(3000)
000112 e0bb      	LDI  R27,HIGH(3000)
000113 d034      	RCALL _delay_ms
                 ; 0000 00C1         goto DEFAULT;
000114 c002      	RJMP _0x35
                 ; 0000 00C2     }
                 ; 0000 00C3 
                 ; 0000 00C4             if( t<TEMP_SW ){
                 _0x32:
000115 3004      	CPI  R16,4
000116 f444      	BRGE _0x36
                 ; 0000 00C5 DEFAULT:        buzz(1, 50);
                 _0x35:
000117 d02a      	RCALL SUBOPT_0x7
000118 d02c      	RCALL SUBOPT_0x8
000119 df12      	RCALL _buzz
                 ; 0000 00C6                 POWER=MAX_POWER;
00011a e6e4      	LDI  R30,LOW(100)
00011b bde9      	OUT  0x29,R30
                 ; 0000 00C7                 delay_min(time_set);
00011c d022      	RCALL SUBOPT_0x6
00011d 2fae      	MOV  R26,R30
00011e df21      	RCALL _delay_min
                 ; 0000 00C8                 buzz(2, 50);
                 ; 0000 00C9                 POWER=power_set;
                 ; 0000 00CA             }
                 ; 0000 00CB             else{
                 _0x36:
                 ; 0000 00CC                 buzz(2, 50);
                 _0x3F:
00011f e0e2      	LDI  R30,LOW(2)
000120 93ea      	ST   -Y,R30
000121 d023      	RCALL SUBOPT_0x8
000122 df09      	RCALL _buzz
                 ; 0000 00CD                 POWER=power_set;
000123 d013      	RCALL SUBOPT_0x4
000124 bde9      	OUT  0x29,R30
                 ; 0000 00CE             }
                 ; 0000 00CF 
                 ; 0000 00D0     while(1){
                 _0x38:
                 ; 0000 00D1         delay_ms(1000);
000125 d003      	RCALL SUBOPT_0x0
                 ; 0000 00D2         btn_func();
000126 df6e      	RCALL _btn_func
                 ; 0000 00D3     }
000127 cffd      	RJMP _0x38
                 ; 0000 00D4 }
                 _0x3B:
000128 cfff      	RJMP _0x3B
                 ; .FEND
                 
                 	.ESEG
                 _power_set:
000000           	.BYTE 0x1
                 _time_set:
000001           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000129 eea8      	LDI  R26,LOW(1000)
00012a e0b3      	LDI  R27,HIGH(1000)
00012b c01c      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00012c e0a0      	LDI  R26,LOW(_power_set)
00012d e0b0      	LDI  R27,HIGH(_power_set)
00012e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00012f e0a1      	LDI  R26,LOW(_time_set)
000130 e0b0      	LDI  R27,HIGH(_time_set)
000131 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000132 e0f0      	LDI  R31,0
000133 30e1      	CPI  R30,LOW(0x1)
000134 e0a0      	LDI  R26,HIGH(0x1)
000135 07fa      	CPC  R31,R26
000136 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000137 dff4      	RCALL SUBOPT_0x1
000138 d09f      	RCALL __EEPROMRDB
000139 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
00013a d08a      	RCALL __DIVW21
00013b 93ea      	ST   -Y,R30
00013c eca8      	LDI  R26,LOW(200)
00013d e0b0      	LDI  R27,0
00013e ceed      	RJMP _buzz
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00013f dfef      	RCALL SUBOPT_0x2
000140 d097      	RCALL __EEPROMRDB
000141 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000142 e0e1      	LDI  R30,LOW(1)
000143 93ea      	ST   -Y,R30
000144 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000145 e3a2      	LDI  R26,LOW(50)
000146 e0b0      	LDI  R27,0
000147 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000148 9610      	adiw r26,0
000149 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00014a e680     +LDI R24 , LOW ( 0x960 )
00014b e099     +LDI R25 , HIGH ( 0x960 )
                +__DELAY_USW_LOOP :
00014c 9701     +SBIW R24 , 1
00014d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x960
00014e 95a8      	wdr
00014f 9711      	sbiw r26,1
000150 f7c9      	brne __delay_ms0
                 __delay_ms1:
000151 9508      	ret
                 
                 	.equ __w1_port=0x18
                 	.equ __w1_bit=0x04
                 
                 _w1_init:
000152 27ee      	clr  r30
000153 98c4      	cbi  __w1_port,__w1_bit
000154 9abc      	sbi  __w1_port-1,__w1_bit
                +
000155 e880     +LDI R24 , LOW ( 0x480 )
000156 e094     +LDI R25 , HIGH ( 0x480 )
                +__DELAY_USW_LOOP :
000157 9701     +SBIW R24 , 1
000158 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x480
000159 98bc      	cbi  __w1_port-1,__w1_bit
                +
00015a e28d     +LDI R24 , LOW ( 0x2D )
                +__DELAY_USB_LOOP :
00015b 958a     +DEC R24
00015c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x2D
00015d 9bb4      	sbis __w1_port-2,__w1_bit
00015e 9508      	ret
                +
00015f ef83     +LDI R24 , LOW ( 0xF3 )
                +__DELAY_USB_LOOP :
000160 958a     +DEC R24
000161 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xF3
000162 9bb4      	sbis __w1_port-2,__w1_bit
000163 e0e1      	ldi  r30,1
                +
000164 ea88     +LDI R24 , LOW ( 0x3A8 )
000165 e093     +LDI R25 , HIGH ( 0x3A8 )
                +__DELAY_USW_LOOP :
000166 9701     +SBIW R24 , 1
000167 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x3A8
000168 9508      	ret
                 
                 __w1_read_bit:
000169 9abc      	sbi  __w1_port-1,__w1_bit
                +
00016a e086     +LDI R24 , LOW ( 0x6 )
                +__DELAY_USB_LOOP :
00016b 958a     +DEC R24
00016c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x6
00016d 98bc      	cbi  __w1_port-1,__w1_bit
                +
00016e e283     +LDI R24 , LOW ( 0x23 )
                +__DELAY_USB_LOOP :
00016f 958a     +DEC R24
000170 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x23
000171 9488      	clc
000172 99b4      	sbic __w1_port-2,__w1_bit
000173 9408      	sec
000174 95e7      	ror  r30
                +
000175 ec80     +LDI R24 , LOW ( 0xC0 )
000176 e090     +LDI R25 , HIGH ( 0xC0 )
                +__DELAY_USW_LOOP :
000177 9701     +SBIW R24 , 1
000178 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xC0
000179 9508      	ret
                 
                 __w1_write_bit:
00017a 94e8      	clt
00017b 9abc      	sbi  __w1_port-1,__w1_bit
                +
00017c e086     +LDI R24 , LOW ( 0x6 )
                +__DELAY_USB_LOOP :
00017d 958a     +DEC R24
00017e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x6
00017f fd70      	sbrc r23,0
000180 98bc      	cbi  __w1_port-1,__w1_bit
                +
000181 e28a     +LDI R24 , LOW ( 0x2A )
                +__DELAY_USB_LOOP :
000182 958a     +DEC R24
000183 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x2A
000184 99b4      	sbic __w1_port-2,__w1_bit
000185 c003      	rjmp __w1_write_bit0
000186 ff70      	sbrs r23,0
000187 c003      	rjmp __w1_write_bit1
000188 9508      	ret
                 __w1_write_bit0:
000189 ff70      	sbrs r23,0
00018a 9508      	ret
                 __w1_write_bit1:
                +
00018b ef80     +LDI R24 , LOW ( 0xF0 )
                +__DELAY_USB_LOOP :
00018c 958a     +DEC R24
00018d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0xF0
00018e 98bc      	cbi  __w1_port-1,__w1_bit
                +
00018f e180     +LDI R24 , LOW ( 0x10 )
                +__DELAY_USB_LOOP :
000190 958a     +DEC R24
000191 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 0x10
000192 9468      	set
000193 9508      	ret
                 
                 _w1_read:
000194 e068      	ldi  r22,8
                 	__w1_read0:
000195 dfd3      	rcall __w1_read_bit
000196 956a      	dec  r22
000197 f7e9      	brne __w1_read0
000198 9508      	ret
                 
                 _w1_write:
000199 2f7a      	mov  r23,r26
00019a e068      	ldi  r22,8
00019b 27ee      	clr  r30
                 __w1_write0:
00019c dfdd      	rcall __w1_write_bit
00019d f426      	brtc __w1_write1
00019e 9577      	ror  r23
00019f 956a      	dec  r22
0001a0 f7d9      	brne __w1_write0
0001a1 95e3      	inc  r30
                 __w1_write1:
0001a2 9508      	ret
                 
                 __ANEGW1:
0001a3 95f1      	NEG  R31
0001a4 95e1      	NEG  R30
0001a5 40f0      	SBCI R31,0
0001a6 9508      	RET
                 
                 __ASRW4:
0001a7 95f5      	ASR  R31
0001a8 95e7      	ROR  R30
                 __ASRW3:
0001a9 95f5      	ASR  R31
0001aa 95e7      	ROR  R30
                 __ASRW2:
0001ab 95f5      	ASR  R31
0001ac 95e7      	ROR  R30
0001ad 95f5      	ASR  R31
0001ae 95e7      	ROR  R30
0001af 9508      	RET
                 
                 __DIVW21U:
0001b0 2400      	CLR  R0
0001b1 2411      	CLR  R1
0001b2 e190      	LDI  R25,16
                 __DIVW21U1:
0001b3 0faa      	LSL  R26
0001b4 1fbb      	ROL  R27
0001b5 1c00      	ROL  R0
0001b6 1c11      	ROL  R1
0001b7 1a0e      	SUB  R0,R30
0001b8 0a1f      	SBC  R1,R31
0001b9 f418      	BRCC __DIVW21U2
0001ba 0e0e      	ADD  R0,R30
0001bb 1e1f      	ADC  R1,R31
0001bc c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001bd 60a1      	SBR  R26,1
                 __DIVW21U3:
0001be 959a      	DEC  R25
0001bf f799      	BRNE __DIVW21U1
0001c0 2fea      	MOV  R30,R26
0001c1 2ffb      	MOV  R31,R27
0001c2 2da0      	MOV  R26,R0
0001c3 2db1      	MOV  R27,R1
0001c4 9508      	RET
                 
                 __DIVW21:
0001c5 d004      	RCALL __CHKSIGNW
0001c6 dfe9      	RCALL __DIVW21U
0001c7 f40e      	BRTC __DIVW211
0001c8 dfda      	RCALL __ANEGW1
                 __DIVW211:
0001c9 9508      	RET
                 
                 __CHKSIGNW:
0001ca 94e8      	CLT
0001cb fff7      	SBRS R31,7
0001cc c002      	RJMP __CHKSW1
0001cd dfd5      	RCALL __ANEGW1
0001ce 9468      	SET
                 __CHKSW1:
0001cf ffb7      	SBRS R27,7
0001d0 c006      	RJMP __CHKSW2
0001d1 95a0      	COM  R26
0001d2 95b0      	COM  R27
0001d3 9611      	ADIW R26,1
0001d4 f800      	BLD  R0,0
0001d5 9403      	INC  R0
0001d6 fa00      	BST  R0,0
                 __CHKSW2:
0001d7 9508      	RET
                 
                 __EEPROMRDB:
0001d8 99e1      	SBIC EECR,EEWE
0001d9 cffe      	RJMP __EEPROMRDB
0001da 93ff      	PUSH R31
0001db b7ff      	IN   R31,SREG
0001dc 94f8      	CLI
0001dd bbae      	OUT  EEARL,R26
0001de 9ae0      	SBI  EECR,EERE
0001df b3ed      	IN   R30,EEDR
0001e0 bfff      	OUT  SREG,R31
0001e1 91ff      	POP  R31
0001e2 9508      	RET
                 
                 __EEPROMWRB:
0001e3 9be1      	SBIS EECR,EEWE
0001e4 c002      	RJMP __EEPROMWRB1
0001e5 95a8      	WDR
0001e6 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0001e7 b79f      	IN   R25,SREG
0001e8 94f8      	CLI
0001e9 bbae      	OUT  EEARL,R26
0001ea 9ae0      	SBI  EECR,EERE
0001eb b38d      	IN   R24,EEDR
0001ec 17e8      	CP   R30,R24
0001ed f019      	BREQ __EEPROMWRB0
0001ee bbed      	OUT  EEDR,R30
0001ef 9ae2      	SBI  EECR,EEMWE
0001f0 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0001f1 bf9f      	OUT  SREG,R25
0001f2 9508      	RET
                 
                 __SAVELOCR3:
0001f3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001f4 931a      	ST   -Y,R17
0001f5 930a      	ST   -Y,R16
0001f6 9508      	RET
                 
                 __LOADLOCR3:
0001f7 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001f8 8119      	LDD  R17,Y+1
0001f9 8108      	LD   R16,Y
0001fa 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny13A register use summary:
r0 :  10 r1 :   5 r2 :   0 r3 :   0 r4 :   6 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  28 r17:  14 r18:   3 r19:   0 r20:   0 r21:   0 r22:   4 r23:   5 
r24:  30 r25:   8 r26:  44 r27:  21 r28:   6 r29:   0 r30:  92 r31:  31 
x  :   2 y  :  28 z  :   0 
Registers used: 17 out of 35 (48.6%)

ATtiny13A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   6 and   :   2 andi  :   1 asr   :   4 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   2 brmi  :   0 brne  :  27 brpl  :   0 brsh  :   3 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :   7 
cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 clr   :   5 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   2 cp    :   4 
cpc   :   4 cpi   :  17 cpse  :   0 dec   :  13 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 
inc   :   2 ld    :   4 ldd   :  11 ldi   :  89 lds   :   0 lpm   :   0 
lsl   :   1 lsr   :   0 mov   :  21 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   4 ori   :   0 out   :  16 
pop   :   1 push  :   1 rcall :  83 ret   :  31 reti  :   0 rjmp  :  44 
rol   :   3 ror   :   6 sbc   :   1 sbci  :   2 sbi   :  11 sbic  :   4 
sbis  :   3 sbiw  :   6 sbr   :   1 sbrc  :   3 sbrs  :   5 sec   :   1 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  13 std   :   2 
sts   :   0 sub   :   1 subi  :   7 swap  :   0 tst   :   0 wdr   :   2 

Instructions used: 59 out of 114 (51.8%)

ATtiny13A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003f6   1014      0   1014    1024  99.0%
[.dseg] 0x000060 0x000070      0      0      0      64   0.0%
[.eseg] 0x000000 0x000002      0      2      2      64   3.1%

Assembly complete, 0 errors, 1 warnings
